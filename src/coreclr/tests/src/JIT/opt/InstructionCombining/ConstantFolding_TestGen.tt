<#@ template language="C#" #>
using System.Runtime.CompilerServices;
using TestType = System.Int32;

public class ConstantFoldingTestsBase
{
    public const TestType Const1 = 8;
    public const TestType Const2 = 1027;

    [MethodImpl(MethodImplOptions.NoInlining)] public TestType GetConst1() => Const1;
    [MethodImpl(MethodImplOptions.NoInlining)] public TestType GetConst2() => Const2;
}

// ((x op icon1) op icon2)
public class ConstantFoldingTests1 : ConstantFoldingTestsBase
{
<#
int groupIndex = 0;
string[] ops = {"+", "-", "&", "|", "^", ">>", "<<", "*", "/" };
for (int i = 0; i < ops.Length; i++)
{
    for (int j = 0; j < ops.Length; j++)
    {
        groupIndex++;
#>
    [MethodImpl(MethodImplOptions.NoInlining)] TestType Case_<#=groupIndex#>_cns(TestType x) => ((x <#=ops[i]#> Const1) <#=ops[j]#> Const2);
    [MethodImpl(MethodImplOptions.NoInlining)] TestType Case_<#=groupIndex#>_var(TestType x) => ((x <#=ops[i]#> GetConst1()) <#=ops[j]#> GetConst2());

<#
    }
}
#>
    public int RunTests()
    {
        int failures = 0;
<#
for (int i = 1; i < groupIndex + 1; i++)
{
#>
        if (Case_<#=i#>_cns(0) != Case_<#=i#>_var(0)) failures++;
        if (Case_<#=i#>_cns(42) != Case_<#=i#>_var(42)) failures++;
        if (Case_<#=i#>_cns(TestType.MinValue) != Case_<#=i#>_var(TestType.MinValue)) failures++;
        if (Case_<#=i#>_cns(TestType.MaxValue) != Case_<#=i#>_var(TestType.MaxValue)) failures++;
<#
}
#>
        return failures;
    }
}

// x op icon1==icon2
public class ConstantFoldingTests2 : ConstantFoldingTestsBase
{
<#
groupIndex = 0;
for (int i = 0; i < ops.Length; i++)
{
    groupIndex++;
#>
    [MethodImpl(MethodImplOptions.NoInlining)] bool Case_<#=groupIndex#>_cns(TestType x) => ((x <#=ops[i]#> Const1) == Const2);
    [MethodImpl(MethodImplOptions.NoInlining)] bool Case_<#=groupIndex#>_var(TestType x) => ((x <#=ops[i]#> GetConst1()) == GetConst2());

<#
}
#>
    public int RunTests()
    {
        int failures = 0;
<#
for (int i = 1; i < groupIndex + 1; i++)
{
#>
        if (Case_<#=i#>_cns(0) != Case_<#=i#>_var(0)) failures++;
        if (Case_<#=i#>_cns(42) != Case_<#=i#>_var(42)) failures++;
        if (Case_<#=i#>_cns(TestType.MinValue) != Case_<#=i#>_var(TestType.MinValue)) failures++;
        if (Case_<#=i#>_cns(TestType.MaxValue) != Case_<#=i#>_var(TestType.MaxValue)) failures++;
<#
}
#>
        return failures;
    }
}

// ((x+icon1)+(y+icon2))
public class ConstantFoldingTests3 : ConstantFoldingTestsBase
{
<#
groupIndex = 0;
for (int i = 0; i < ops.Length; i++)
{
    for (int j = 0; j < ops.Length; j++)
    {
        groupIndex++;
#>
    [MethodImpl(MethodImplOptions.NoInlining)] TestType Case_<#=groupIndex#>_cns(TestType x, TestType y) => ((x <#=ops[i]#> Const1) + (y <#=ops[j]#> Const2));
    [MethodImpl(MethodImplOptions.NoInlining)] TestType Case_<#=groupIndex#>_var(TestType x, TestType y) => ((x <#=ops[i]#> GetConst1()) + (y <#=ops[j]#> GetConst2()));

<#
    }
}
#>
    public int RunTests()
    {
        int failures = 0;
<#
for (int i = 1; i < groupIndex + 1; i++)
{
#>
        if (Case_<#=i#>_cns(0, 0) != Case_<#=i#>_var(0, 0)) failures++;
        if (Case_<#=i#>_cns(42, 42) != Case_<#=i#>_var(42, 42)) failures++;
        if (Case_<#=i#>_cns(TestType.MinValue, TestType.MinValue) != Case_<#=i#>_var(TestType.MinValue, TestType.MinValue)) failures++;
        if (Case_<#=i#>_cns(TestType.MaxValue, TestType.MaxValue) != Case_<#=i#>_var(TestType.MaxValue, TestType.MaxValue)) failures++;
        if (Case_<#=i#>_cns(TestType.MaxValue, TestType.MinValue) != Case_<#=i#>_var(TestType.MaxValue, TestType.MinValue)) failures++;
        if (Case_<#=i#>_cns(TestType.MinValue, TestType.MaxValue) != Case_<#=i#>_var(TestType.MinValue, TestType.MaxValue)) failures++;
<#
}
#>
        return failures;
    }
}